import { RenderFn, ResolvedOptions } from "./options.js";
import { Page } from "./page.js";
export { init, ctx };
export type { Mode, Base as ContextData, InitialBase as ContextDataInitial, Out as ContextDataOut, };
interface Base {
    cssFile?: string;
    htmlTemplate: string;
    mode: Mode;
    root: string;
    paths: string[];
    pages: Record<string, Page>;
    excluded: string[];
    renderFn: RenderFn;
}
type Mode = "dev" | "build";
type InitialBase = Partial<Pick<Base, "root">> & Pick<Base, "cssFile" | "htmlTemplate" | "mode" | "renderFn">;
interface InitialContext extends Provider<InitialBase>, ContextCompleter {
}
interface Provider<T> {
    get(): Readonly<T>;
}
interface ContextCompleter {
    complete(rest: Omit<Base, keyof Omit<InitialBase, "root">>): Context;
}
declare function init(opts: ResolvedOptions, mode?: Mode): InitialContext;
interface Context extends InExclusionChecker, Provider<Base>, Updater<Base>, DevChecker {
    getOut: Provider<Out>["get"];
}
declare function ctx(): Context;
type Out = Pick<Base, "pages">;
interface Updater<T> {
    set(values: Partial<T>): T;
}
interface DevChecker {
    isDev(): boolean;
}
interface InExclusionChecker {
    includes(id: unknown): boolean;
    excludes(id: unknown): boolean;
}
//# sourceMappingURL=ctx.d.ts.map