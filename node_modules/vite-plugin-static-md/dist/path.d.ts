import { ParsedPath } from "path";
export declare function getPaths(root: string, exclude: string[]): Promise<string[]>;
/**
 * @param path ParsedPath -- some path to some markdown resource
 * @param root string -- root path that the result should be relative to
 * @returns string a relative path to a directory for the given resource
 *
 * Ensures leading & trailing slashes are present & defers rest to
 * `getOutputRelativePath(...)` function
 */
export declare function getURL(path: ParsedPath, root: string): string;
export declare function getHtmlId({ dir, name }: ParsedPath): string;
/**
 * @param path ParsedPath -- some path to some markdown resource
 * @param root string -- root path that the result should be relative to
 * @returns string a relative path to a directory for the given resource
 *
 * Remove leading directories from path to get a relative URI. Also removes any
 * "index" if present since the server will look for an "index.html" in
 * matching path location
 */
export declare function getOutputRelativePath({ dir, name }: ParsedPath, root: string): string;
/**
 * @param path ParsedPath -- some path to some markdown resource
 * @param root string -- root path that the result should be relative to
 * @returns string a relative path to a directory for the given resource
 *
 * Defers to `getOutputRelativePath(...)`
 */
export declare function getRollupInputKey(path: ParsedPath, root: string): string;
export declare function getInputRelativePath({ dir, base }: ParsedPath, root: string): string;
//# sourceMappingURL=path.d.ts.map